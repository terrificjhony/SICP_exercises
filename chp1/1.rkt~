#lang scheme

;1.1 result of expressions
;10
;12
;3
;6
;a = 3
;b = 4
;#f
;4
;17
;6
;16

;1.2 translate the expression
(/ (+ 5 (+ 4(- 2(- 3 (/ 4 5)))))
   (* 3 (- 6 2) (- 3 7)))

;1.3 defien a procedure taking 3  arg and returning sum of 2 larger
(define (larger_2sum_of_3 x y z)
  (if (< x y)
      (if (< x z)
       (+ z y)
       (+ x y))
  ((if (< y z)
       (+ z x)
       (+ y x)))))


(define a (larger_2sum_of_3 1 2 4)) ;for test
(define w (larger_2sum_of_3 1 52 42)) ;for test

;1.4 describe the procedure
;get 2 arguments a b ,and return the sum of a and the absolute value of b

;1.5 tell if applicative
;(if applicative
;    0
;    infinite loop,no result);because the (p) is gonna keep call the procedure (p)

;1.6 why new-if failed
(define (square x)
  (* x x))

;(define (sqrt-iter guess x)
;  (if (good-enough? guess x)
;      guess
;      (sqrt-iter (improve guess x) x)))

(define (improve guess x)
  (average guess (/ x guess)))

(define (average x y)
  (/ (+ x y) 2))

(define (good-enough? guess x)
  (< (abs (- (square guess) x)) 0.001))

(define (sqrt x)
  (sqrt-iter 1.0 x))
;new-predicate
(define (new-if predicate then-clause else-clause)
  (cond  (predicate then-clause)
         (else else-clause)))

(define (sqrt-iter guess x)
  (new-if (good-enough? guess x)
          guess
          (sqrt-iter (improve guess x) x)))


























