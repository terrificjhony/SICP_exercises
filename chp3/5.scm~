;; (define (estimate-pi trials)
;;   (sqrt (/ 6 (monte-carlo trials cesaro-test))))

(define (random-in-range low high)
            (let ((range (- high low)))
              (+ low (random range))))


 
(define (monte-carlo trials experiment)
  (define (iter trials-remaining trials-passed)
    (cond ((= trials-remaining 0)
	   (/ trials-passed trials))
	  ((experiment)
	   (iter (- trials-remaining 1) (+ trials-passed 1)))
	  (else
	   (iter (- trials-remaining 1) trials-passed))))
  (iter trials 0))

(define (comb-rand a1 a2 b1 b2)
  (cons (random-in-range a1 a2) (random-in-range b1 b2)))
;;main
(define (experiment p a1 a2 b1 b2)
  p(comb-rand a1 a2 b1 b2))

(define (estimate-integral p x1 x2 y1 y2 trials)
  (/ (* (* (- x2 x1) (- y2 y1)) (monte-carlo trials experiment(p x1 x2 b1 b2))) (* (- x2 x1) (- x2 x1)))
